// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.xacro.Xacro with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/xacro" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.ipa.fraunhofer.de/urdf" as urdf

Robot returns Robot:
	{Robot}
	'Robot'
	'{'
		'name' name=ID
		('version' version=STRING)?
		('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
		('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
		('body' body=Body)?
	'}';

Macro returns Macro:
	'Macro'
	'{'
		'name' name=ID
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		('body' body=Body)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=ID
	'{'
		('default' default=STRING)?
		('value' value=STRING)?
	'}';

Body returns Body:
	{Body}
	'Body'
	'{'
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
		('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
		('material' '{' material+=MaterialGlobal ( "," material+=MaterialGlobal)* '}' )?
		('transmission' '{' transmission+=Transmission ( "," transmission+=Transmission)* '}' )?
	'}';
	
MacroCall returns MacroCall:
	{MacroCall}
	'MacroCall'
	'{'
		'macro' macro=[Macro]
		('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
	'}';

ParameterCall returns ParameterCall:
	{ParameterCall}
	'ParameterCall'
	'{'
		'parameter' parameter=[Parameter]
		'value' value=STRING
	'}';

Joint returns urdf::Joint:
	'Joint'
	'{'
		'name' name=ID
		'type' type=JOINTTYPE
		'parent' parent=[urdf::Link|STRING]
		'child' child=[urdf::Link|STRING]
		('origin' origin=Pose)?
		('axis' axis=Axis)?
		('calibration' calibration=Calibration)?
		('dynamics' dynamics=Dynamics)?
		('limit' limit=Limit)?
		('safetyController' safetyController=SafetyController)?
		('mimic' mimic=Mimic)?
	'}';

Link returns urdf::Link:
	'Link'
	'{'
		'name' name=ID
		('type' type=STRING)?
		('inertial' inertial=Inertial)?
		('visual' visual=Visual)?
		('collision' collision=Collision)?
	'}';

MaterialGlobal returns urdf::MaterialGlobal:
	'MaterialGlobal'
	'{'
		'name' name=ID
		('color' color=Color)?
		('texture' texture=Texture)?
	'}';
	
Transmission returns urdf::Transmission:
	'Transmission'
	'{'
		('mechanicalReduction' '{' mechanicalReduction+=Double0 ( "," mechanicalReduction+=Double0)* '}' )?
		'name' name=ID
		'type' type=STRING
		('leftActuator' '{' leftActuator+=ActuatorTransmission ( "," leftActuator+=ActuatorTransmission)* '}' )?
		('rightActuator' '{' rightActuator+=ActuatorTransmission ( "," rightActuator+=ActuatorTransmission)* '}' )?
		('flexJoint' '{' flexJoint+=ActuatorTransmission ( "," flexJoint+=ActuatorTransmission)* '}' )?
		('rollJoint' '{' rollJoint+=ActuatorTransmission ( "," rollJoint+=ActuatorTransmission)* '}' )?
		('gapJoint' '{' gapJoint+=GapJointTransmission ( "," gapJoint+=GapJointTransmission)* '}' )?
		('passiveJoint' '{' passiveJoint+=PassiveJointTransmission ( "," passiveJoint+=PassiveJointTransmission)* '}' )?
		('useSimulatedGripperJoint' '{' useSimulatedGripperJoint+=UseSimulatedGripperJointType ( "," useSimulatedGripperJoint+=UseSimulatedGripperJointType)* '}' )?
		('actuator' '{' actuator+=Name ( "," actuator+=Name)* '}' )?
		('joint' '{' joint+=Name ( "," joint+=Name)* '}' )?
	'}';

Pose returns urdf::Pose:
	{urdf::Pose}
	'Pose'
	'{'
		('rpy' rpy=STRING)?
		('xyz' xyz=STRING)?
	'}';

Axis returns urdf::Axis:
	{urdf::Axis}
	'Axis'
	'{'
		('xyz' xyz=STRING)?
	'}';

Calibration returns urdf::Calibration:
	{urdf::Calibration}
	'Calibration'
	'{'
		('falling' falling=Double0)?
		('referencePosition' referencePosition=Double0)?
		('rising' rising=Double0)?
	'}';

Dynamics returns urdf::Dynamics:
	{urdf::Dynamics}
	'Dynamics'
	'{'
		('damping' damping=Double0)?
		('friction' friction=Double0)?
	'}';

Limit returns urdf::Limit:
	{urdf::Limit}
	'Limit'
	'{'
		('effort' effort=Double0)?
		('lower' lower=Double0)?
		('upper' upper=Double0)?
		('velocity' velocity=Double0)?
	'}';

SafetyController returns urdf::SafetyController:
	'SafetyController'
	'{'
		('kPosition' kPosition=Double0)?
		'kVelocity' kVelocity=Double0
		('softLowerLimit' softLowerLimit=Double0)?
		('softUpperLimit' softUpperLimit=Double0)?
	'}';

Mimic returns urdf::Mimic:
	'Mimic'
	'{'
		'joint' joint=STRING
		('multiplier' multiplier=Double0)?
		('offset' offset=Double0)?
	'}';

Inertial returns urdf::Inertial:
	{urdf::Inertial}
	'Inertial'
	'{'
		('origin' origin=Pose)?
		('mass' mass=Mass)?
		('inertia' inertia=Inertia)?
	'}';

Visual returns urdf::Visual:
	'Visual'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
		('material' material=Material)?
	'}';

Collision returns urdf::Collision:
	'Collision'
	'{'
		('name' name=ID)?
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
		('verbose' verbose=Verbose)?
	'}';

Mass returns urdf::Mass:
	{urdf::Mass}
	'Mass'
	'{'
		('value' value=Double0)?
	'}';

Inertia returns urdf::Inertia:
	{urdf::Inertia}
	'Inertia'
	'{'
		('ixx' ixx=Double0)?
		('ixy' ixy=Double0)?
		('ixz' ixz=Double0)?
		('iyy' iyy=Double0)?
		('iyz' iyz=Double0)?
		('izz' izz=Double0)?
	'}';

Geometry returns urdf::Geometry:
	{urdf::Geometry}
	'Geometry'
	'{'
		('box' box=Box)?
		('cylinder' cylinder=Cylinder)?
		('sphere' sphere=Sphere)?
		('mesh' mesh=Mesh)?
	'}';

Material returns urdf::Material:
	{urdf::Material}
	'Material'
	'{'
		('name' name=ID)?
		('color' color=Color)?
		('texture' texture=Texture)?
	'}';

Box returns urdf::Box:
	{urdf::Box}
	'Box'
	'{'
		('size' size=STRING)?
	'}';

Cylinder returns urdf::Cylinder:
	'Cylinder'
	'{'
		'length' length=Double0
		'radius' radius=Double0
	'}';

Sphere returns urdf::Sphere:
	'Sphere'
	'{'
		'radius' radius=Double0
	'}';

Mesh returns urdf::Mesh:
	'Mesh'
	'{'
		'filename' filename=AnyURI
		('scale' scale=STRING)?
	'}';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Color returns urdf::Color:
	{urdf::Color}
	'Color'
	'{'
		('rgba' rgba=STRING)?
	'}';

Texture returns urdf::Texture:
	{urdf::Texture}
	'Texture'
	'{'
		('filename' filename=AnyURI)?
	'}';

Verbose returns urdf::Verbose:
	{urdf::Verbose}
	'Verbose'
	'{'
		('value' value=STRING)?
	'}';
	
ActuatorTransmission returns urdf::ActuatorTransmission:
	'ActuatorTransmission'
	'{'
		'mechanicalReduction' mechanicalReduction=Double0
		'name' name=ID
	'}';

GapJointTransmission returns urdf::GapJointTransmission:
	'GapJointTransmission'
	'{'
		'a' a=Double0
		'b' b=Double0
		'gearRatio' gearRatio=Double0
		'h' h=Double0
		'l0' l0=Double0
		'mechanicalReduction' mechanicalReduction=Double0
		'name' name=ID
		'phi0' phi0=Double0
		'r' r=Double0
		'screwReduction' screwReduction=Double0
		't0' t0=Double0
		'theta0' theta0=Double0
	'}';

PassiveJointTransmission returns urdf::PassiveJointTransmission:
	'PassiveJointTransmission'
	'{'
		'name' name=ID
	'}';
	
UseSimulatedGripperJointType returns urdf::UseSimulatedGripperJointType:
	{urdf::UseSimulatedGripperJointType}
	'UseSimulatedGripperJointType'
	;
	
Name returns urdf::Name:
	{urdf::Name}
	'Name'
	'{'
		('name' name=ID)?
	'}';
	
// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;